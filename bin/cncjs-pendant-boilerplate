#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var program = require('commander');
var serialport = require('serialport');
var inquirer = require('inquirer');
var vorpal = require('vorpal')();
var pkg = require('../package.json');
var serverMain = require('../index');
var commands = require('../commands');
var keypress = require('keypress');
var options = {};

program
    .version(pkg.version)
    .usage('-s <secret> -p <port> [options]')
    .option('-l, --list', 'list available ports then exit')
    .option('-s, --secret', 'the secret key stored in the ~/.cncrc file')
    .option('-p, --port <port>', 'path or name of serial port')
    .option('-b, --baudrate <baudrate>', 'baud rate (default: 115200)', 115200)
    .option('--socket-address <address>', 'socket address or hostname (default: localhost)', 'localhost')
    .option('--socket-port <port>', 'socket port (default: 8000)', 8000)
    .option('--controller-type <type>', 'controller type: Grbl|Smoothie|TinyG (default: Grbl)', 'Grbl')
    .option('--access-token-lifetime <lifetime>', 'access token lifetime in seconds or a time span string (default: 30d)', '30d');

program.parse(process.argv);

var options = {
    secret: program.secret,
    port: program.port,
    baudrate: program.baudrate,
    socketAddress: program.socketAddress,
    socketPort: program.socketPort,
    controllerType: program.controllerType,
    accessTokenLifetime: program.accessTokenLifetime
};

if (options.list) {
    serialport.list().then(function(ports) {
        ports.forEach(function(port) {
            console.log(port.path);
        });
    }).catch((err) => {
        console.error(err);
        process.exit(1);
    });
    return;
}

var store = {
    controller: {
        state: {},
        settings: {}
    },
    sender: {
        status: {}
    }
};

// Keypress handling variables
let stop = false;
let isProcessing = false;

// Setup keypress listener
keypress(process.stdin);
process.stdin.setRawMode(true);
process.stdin.resume();

process.stdin.on('keypress', (ch, key) => {
    if (!isProcessing && key && key.name === 'space') {
        stop = true;
        console.log('Space button pressed. Stopping...');
    }
});

var moveToPoints = async (points) => {
    isProcessing = true;
    for (let i = 0; i < points.length; i++) {
        if (stop) break;

        const point = points[i];
        const gcodeCommand = `G00 X${point.x} Y${point.y} Z${point.z}\n`;

        socket.emit('write', options.port, gcodeCommand);
        console.log('Sending G-code command:' + gcodeCommand);

        await new Promise(resolve => setTimeout(resolve, 1000));
    }

    console.log('Finished processing points or stopped.');
    isProcessing = false;
};

var createServer = function(options) {
    serverMain(options, function(err, socket) {
        if (err) {
            console.error(err);
            process.exit(1);
        }

        // Setup socket listeners
        const setupSocketListeners = (type) => {
            socket.on(`${type}:state`, (state) => store.controller.state = state);
            socket.on(`${type}:settings`, (settings) => store.controller.settings = settings);
        };
        ['Grbl', 'Smoothie', 'TinyG'].forEach(setupSocketListeners);

        socket.on('sender:status', (data) => store.sender.status = data);

        vorpal
            .mode('command')
            .description('Enters the command-line mode.')
            .delimiter(options.controllerType + '>')
            .init(function(args, callback) {
                this.log('You can now directly enter commands. To exit, type `exit`.');
                callback();
            })
            .action(function(command, callback) {
                var line = command + '\n';
                socket.emit('write', options.port, line);
                callback();
            });

        vorpal
            .command('tri')
            .description('Makes a triangle.')
            .delimiter(options.controllerType + '>')
            .action(function(command, callback) {
                var multiLineGCode = 'G00 x0y0\nG00 X40y40\nG00 X40Y40z80\nG00 X40Y40Z0\nG00 x0y40\nG00 x0y0\n';
                socket.emit('write', options.port, multiLineGCode);
                callback();
            });

        vorpal
            .command('multiPoint')
            .description('Moves to points defined by another device.')
            .delimiter(options.controllerType + '>')
            .action(function(args, callback) {
                var points1 = [
                    { x: 0, y: 0, z: 0 },
                    { x: 30, y: 30, z: 0 },
                    { x: 30, y: 30, z: 80 },
                    { x: 30, y: 30, z: 0 },
                    { x: 0, y: 30, z: 0 },
                    { x: 0, y: 0, z: 0 },
                ];

                var gcodeCommands = points1.map(point => `G00 X${point.x} Y${point.y} Z${point.z}`).join('\n');
                socket.emit('write', options.port, gcodeCommands);
                console.log('Sending G-code commands:', gcodeCommands);
                callback();
            });

        vorpal
            .command('loopPoints')
            .description('Moves to points defined by another device.')
            .action(function(args, callback) {
                var points2 = [
                    { x: 0, y: 0, z: 0 },
                    { x: 30, y: 30, z: 0 },
                    { x: 30, y: 30, z: 80 },
                    { x: 30, y: 30, z: 0 },
                    { x: 0, y: 30, z: 0 },
                    { x: 0, y: 0, z: 0 },
                ];
                stop = false;
                moveToPoints(points2).then(callback);
            });

        vorpal
            .command('status')
            .description('Displays sender status')
            .action(function(args, callback) {
                console.log(store.sender.status);
                callback();
            });

        vorpal
            .command('controller <command>')
            .description('Available commands: state, settings')
            .action(function(args, callback) {
                var command = args.command;
                if (command === 'state') {
                    console.log(store.controller.state);
                } else if (command === 'settings') {
                    console.log(store.controller.settings);
                }
                callback();
            });

        commands.forEach(function(command) {
            vorpal
                .command(command.command)
                .action(function(args, callback) {
                    command.action(args, function(err, eventName) {
                        if (err) {
                            console.log('error');
                            callback(err);
                            return;
                        }

                        var eventArgs = Array.prototype.slice.call(arguments, 2);
                        socket.emit.apply(socket, [eventName, options.port].concat(eventArgs));
                        console.log('ok');
                        callback();
                    });
                });
        });

        console.log('');
        console.log('Type "help" to display supported options:');

        vorpal
            .delimiter('pendant$')
            .show();
    });
};

if (options.port) {
    createServer(options);
    return;
}

serialport.list().then(function (ports) {
    const choices = ports.map(port => port.path);

    inquirer.prompt([{
        type: 'list',
        name: 'port',
        message: 'Specify which port you want to use?',
        choices: choices
    }]).then(function(answers) {
        options.port = answers.port;
        createServer(options);
    });
}).catch((err) => {
    console.error(err);
    process.exit(1);
});